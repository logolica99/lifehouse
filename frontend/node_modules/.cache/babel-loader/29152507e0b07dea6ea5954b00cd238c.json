{"ast":null,"code":"var _jsxFileName = \"G:\\\\final-shit\\\\frontend\\\\src\\\\components\\\\CreateComment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateComment = props => {\n  _s();\n\n  const getCookie = name => {\n    var cookieValue = null;\n\n    if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n\n    return cookieValue;\n  };\n\n  const [commentData, setCommentData] = useState('');\n\n  const createCommentChangeHandler = e => {\n    setCommentData(e.target.value);\n  };\n\n  const createCommentFormHandler = e => {\n    //`http://127.0.0.1:8000/api/post/${post_id}/${props.userId}/comment\n    fetch();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: commentData,\n        onChange: setCommentData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateComment, \"qx5fpH7yC40r8o6iblsildiMxtM=\");\n\n_c = CreateComment;\nexport default CreateComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateComment\");","map":{"version":3,"sources":["G:/final-shit/frontend/src/components/CreateComment.js"],"names":["React","useState","CreateComment","props","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","commentData","setCommentData","createCommentChangeHandler","e","target","value","createCommentFormHandler","fetch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,SAAS,GAAIC,IAAD,IAAU;AACxB,QAAIC,WAAW,GAAG,IAAlB;;AACA,QAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,UAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb,CADqC,CAErC;;AACA,YAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAAyCP,IAAI,GAAG,GAApD,EAAyD;AACrDC,UAAAA,WAAW,GAAGS,kBAAkB,CAC5BP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAD4B,CAAhC;AAGA;AACH;AACJ;AACJ;;AACD,WAAON,WAAP;AACH,GAhBD;;AAiBA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMiB,0BAA0B,GAAIC,CAAD,IAAO;AACtCF,IAAAA,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACH,GAFD;;AAIA,QAAMC,wBAAwB,GAAGH,CAAD,IAAM;AAClC;AACAI,IAAAA,KAAK;AACR,GAHD;;AAKA,sBACI;AAAA,2BACI;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAEP,WAFX;AAGI,QAAA,QAAQ,EAAEC;AAHd;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAzCD;;GAAMf,a;;KAAAA,a;AA2CN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CreateComment = (props) => {\r\n    const getCookie = (name) => {\r\n        var cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            var cookies = document.cookie.split(';');\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === name + '=') {\r\n                    cookieValue = decodeURIComponent(\r\n                        cookie.substring(name.length + 1)\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    };\r\n    const [commentData, setCommentData] = useState('');\r\n\r\n    const createCommentChangeHandler = (e) => {\r\n        setCommentData(e.target.value);\r\n    };\r\n\r\n    const createCommentFormHandler =(e) =>{\r\n        //`http://127.0.0.1:8000/api/post/${post_id}/${props.userId}/comment\r\n        fetch()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input\r\n                    type='text'\r\n                    value={commentData}\r\n                    onChange={setCommentData}\r\n                />\r\n                <input type='button' value='Post' />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateComment;\r\n"]},"metadata":{},"sourceType":"module"}