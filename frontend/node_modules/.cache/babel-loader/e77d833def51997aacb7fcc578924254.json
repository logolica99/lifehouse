{"ast":null,"code":"var _jsxFileName = \"/home/logolica99/lifehouse/final-shit/frontend/src/components/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Register from './Register';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [password, setPassword] = useState('');\n  const [loginPage, setLoginPage] = useState(true);\n\n  const usernameFormHandler = e => {\n    props.setUsername(e.target.value);\n  };\n\n  const passwordFormHandler = e => {\n    setPassword(e.target.value);\n  };\n\n  const getCookie = name => {\n    var cookieValue = null;\n\n    if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n\n    return cookieValue;\n  };\n\n  const loginPageOrRegisterPage = () => {\n    if (loginPage) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Username\",\n            onChange: usernameFormHandler,\n            value: props.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            onChange: passwordFormHandler,\n            value: password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Log In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"\",\n            onClick: loginPageToRegisterPage,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  const loginPageToRegisterPage = e => {\n    e.preventDefault();\n    setLoginPage(false);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    var csrftoken = getCookie('csrftoken');\n    fetch('http://127.0.0.1:8000/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify({\n        username: props.username,\n        password: password\n      })\n    }).then(data => data.json()).then(data => {\n      console.log(data.message);\n\n      if (data.message === 'Logged in Successfully') {\n        props.setUserId(data.user_id);\n        props.setIsLogged('true');\n      }\n    }).catch(function (error) {\n      console.log('ERROR:', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loginPageOrRegisterPage()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"mtlsl65g/XC1uLNWqmYS7O6Bi3Q=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/logolica99/lifehouse/final-shit/frontend/src/components/Login.js"],"names":["React","useState","useEffect","Register","Login","props","password","setPassword","loginPage","setLoginPage","usernameFormHandler","e","setUsername","target","value","passwordFormHandler","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","loginPageOrRegisterPage","submitHandler","username","loginPageToRegisterPage","preventDefault","csrftoken","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","message","setUserId","user_id","setIsLogged","catch","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Register from './Register';\r\n\r\nconst Login = (props) => {\r\n    const [password, setPassword] = useState('');\r\n    const [loginPage, setLoginPage] = useState(true);\r\n    const usernameFormHandler = (e) => {\r\n        props.setUsername(e.target.value);\r\n    };\r\n    const passwordFormHandler = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n\r\n    const getCookie = (name) => {\r\n        var cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            var cookies = document.cookie.split(';');\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === name + '=') {\r\n                    cookieValue = decodeURIComponent(\r\n                        cookie.substring(name.length + 1)\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    };\r\n\r\n    const loginPageOrRegisterPage = () => {\r\n        if (loginPage) {\r\n            return (\r\n                <div>\r\n                    <form onSubmit={submitHandler}>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Username'\r\n                            onChange={usernameFormHandler}\r\n                            value={props.username}\r\n                        />\r\n                        <input\r\n                            type='password'\r\n                            placeholder='Password'\r\n                            onChange={passwordFormHandler}\r\n                            value={password}\r\n                        />\r\n                        <input type='submit' value='Log In' />\r\n                    </form>\r\n                    <p>\r\n                        Don't have an account? <a href='' onClick={loginPageToRegisterPage}>Sign Up</a>\r\n                    </p>\r\n                </div>\r\n            );\r\n        } else {\r\n            return <Register />;\r\n        }\r\n    };\r\n\r\n    const loginPageToRegisterPage = (e) =>{\r\n        e.preventDefault();\r\n        setLoginPage(false);\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        var csrftoken = getCookie('csrftoken');\r\n        fetch('http://127.0.0.1:8000/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'X-CSRFToken': csrftoken,\r\n            },\r\n            body: JSON.stringify({\r\n                username: props.username,\r\n                password: password,\r\n            }),\r\n        })\r\n            .then((data) => data.json())\r\n            .then((data) => {\r\n                console.log(data.message);\r\n                if (data.message === 'Logged in Successfully') {\r\n                    props.setUserId(data.user_id);\r\n                    props.setIsLogged('true');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log('ERROR:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loginPageOrRegisterPage()}\r\n        </div>\r\n    );\r\n};\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}